//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public static class Extensions
{
    public static Vector2 GetCoordinates<T>(this T[,] array, T searchedItem)
    {
        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                if (array[i, j].Equals(searchedItem))
                {
                    return new Vector2(i, j);
                }
            }
        }
        throw new Exception("item not found");
    }

    public static double Distance(this Vector3 point, Vector3 otherPoint)
    {
        return Math.Sqrt(Math.Pow(point.x - otherPoint.x, 2) + Math.Pow(point.y - otherPoint.y, 2) + Math.Pow(point.z - otherPoint.z, 2));
    }

    public static float Distance(this Vector2 point, Vector2 otherPoint)
    {
        return Mathf.Sqrt(Mathf.Pow(point.x - otherPoint.x, 2) + Mathf.Pow(point.y - otherPoint.y, 2));
    }

    public static string FormatWith(this string str, params object[] parameters)
    {
        return String.Format(str, parameters);
    }

    public static Rect Bounds(this BoxCollider2D collider)
    {
        var size = collider.size;
        var sizeX = size.x / 2;
        var sizeY = size.y / 2;
        var startingPoint = (Vector2)collider.transform.position + new Vector2(-sizeX, -sizeY);
        return new Rect(startingPoint.x, startingPoint.y, size.x, size.y);
    }


    public static T ChooseRandomMember<T>(this IEnumerable<T> list)
    {
        var totalCount = list.Count();
        double currentChecked = 0.0;
        foreach (var member in list)
        {
            currentChecked++;
            if (Randomizer.CheckChance(currentChecked / totalCount))
            {
                return member;
            }
        }
        return default(T);
    }

    public static bool AreNeighbors(SquareScript first, SquareScript second)
    {
        if ((first.GetNextSquare(0, 1) == second) ||
            (first.GetNextSquare(1, 0) == second) || 
            (first.GetNextSquare(-1,0 ) == second) ||
            (first.GetNextSquare(0, -1) == second) )
        {
            return true;
        }

        return false;
    }
}